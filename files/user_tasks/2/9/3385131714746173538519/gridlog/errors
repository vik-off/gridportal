Sep 27 21:17:42 Maximal inactivity time: 300 s
Sep 27 21:17:42 Downloader started
Sep 27 21:17:42 Leaving downloader (0)
----- starting submit_pbs_job -----
PBS jobname: Test_job_on_Cri
PBS job script built
PBS script follows:
-------------------------------------------------------------------
# PBS batch job script built by grid-manager
#PBS -e '/scratch/grid/3385131714746173538519.comment'
#PBS -j eo

#PBS -q batch
#PBS -N 'Test_job_on_Cri'
#PBS -l nodes=1
#PBS -l cput=2850:0
#PBS -l walltime=2850:0

# Overide umask of execution node (sometime values are really strange)
umask 077
# Setting environment variables as specified by user

RUNTIME_JOB_DIR=/scratch/grid/3385131714746173538519
RUNTIME_JOB_DIAG=/scratch/grid/3385131714746173538519.diag
RUNTIME_JOB_STDIN=/dev/null
RUNTIME_JOB_STDOUT=/scratch/grid/3385131714746173538519/CrimeaEco.txt
RUNTIME_JOB_STDERR=/scratch/grid/3385131714746173538519/CrimeaEco.err
if [ ! -z "$RUNTIME_GRIDAREA_DIR" ] ; then
  RUNTIME_JOB_DIR=$RUNTIME_GRIDAREA_DIR/`basename $RUNTIME_JOB_DIR`
  RUNTIME_JOB_STDIN=`echo "$RUNTIME_JOB_STDIN" | sed "s#^/scratch/grid/3385131714746173538519#$RUNTIME_JOB_DIR#"`
  RUNTIME_JOB_STDOUT=`echo "$RUNTIME_JOB_STDOUT" | sed "s#^/scratch/grid/3385131714746173538519#$RUNTIME_JOB_DIR#"`
  RUNTIME_JOB_STDERR=`echo "$RUNTIME_JOB_STDERR" | sed "s#^/scratch/grid/3385131714746173538519#$RUNTIME_JOB_DIR#"`
  RUNTIME_JOB_DIAG=`echo "$RUNTIME_JOB_DIAG" | sed "s#^/scratch/grid/3385131714746173538519#$RUNTIME_JOB_DIR#"`
  RUNTIME_CONTROL_DIR=`echo "$RUNTIME_CONTROL_DIR" | sed "s#^/scratch/grid/3385131714746173538519#$RUNTIME_JOB_DIR#"`
fi
RUNTIME_LOCAL_SCRATCH_DIR=${RUNTIME_LOCAL_SCRATCH_DIR:-}
RUNTIME_FRONTEND_SEES_NODE=${RUNTIME_FRONTEND_SEES_NODE:-}
RUNTIME_NODE_SEES_FRONTEND=${RUNTIME_NODE_SEES_FRONTEND:-yes}
if [ ! -z "$RUNTIME_LOCAL_SCRATCH_DIR" ] && [ ! -z "$RUNTIME_NODE_SEES_FRONTEND" ] ; then
  # moving (!!!!! race condition here - while there is no job directory
  # gridftp can create the one with the same name !!!!!)
  RUNTIME_NODE_JOB_DIR="$RUNTIME_LOCAL_SCRATCH_DIR"/`basename "$RUNTIME_JOB_DIR"`
  rm -rf "$RUNTIME_NODE_JOB_DIR"
  mkdir -p "$RUNTIME_NODE_JOB_DIR"
  #use find here instead of mv to get files starting with a "."
  find "$RUNTIME_JOB_DIR" -mindepth 1 -maxdepth 1 -exec mv '{}' "$RUNTIME_NODE_JOB_DIR" \;
  if [ ! -z "$RUNTIME_FRONTEND_SEES_NODE" ] ; then
    # creating link for whole directory
    ln -s "$RUNTIME_FRONTEND_SEES_NODE"/`basename "$RUNTIME_JOB_DIR"` "$RUNTIME_JOB_DIR"
  else
    # keep stdout, stderr and control directory on frontend
    # recreate job directory
    mkdir "$RUNTIME_JOB_DIR"
    # make those files
    mkdir -p `dirname "$RUNTIME_JOB_STDOUT"`
    mkdir -p `dirname "$RUNTIME_JOB_STDERR"`
    touch "$RUNTIME_JOB_STDOUT"
    touch "$RUNTIME_JOB_STDERR"
    RUNTIME_JOB_STDOUT__=`echo "$RUNTIME_JOB_STDOUT" | sed "s#^${RUNTIME_JOB_DIR}#${RUNTIME_NODE_JOB_DIR}#"`
    RUNTIME_JOB_STDERR__=`echo "$RUNTIME_JOB_STDERR" | sed "s#^${RUNTIME_JOB_DIR}#${RUNTIME_NODE_JOB_DIR}#"`
    rm "$RUNTIME_JOB_STDOUT__" 2>/dev/null
    rm "$RUNTIME_JOB_STDERR__" 2>/dev/null
    if [ ! -z "$RUNTIME_JOB_STDOUT__" ] ; then
      ln -s "$RUNTIME_JOB_STDOUT" "$RUNTIME_JOB_STDOUT__"
    fi
    if [ "$RUNTIME_JOB_STDOUT__" != "$RUNTIME_JOB_STDERR__" ] ; then
      if [ ! -z "$RUNTIME_JOB_STDOUT__" ] ; then
        ln -s "$RUNTIME_JOB_STDERR" "$RUNTIME_JOB_STDERR__"
      fi
    fi
    if [ ! -z "$RUNTIME_CONTROL_DIR" ] ; then
      # move control directory back to frontend
      RUNTIME_CONTROL_DIR__=`echo "$RUNTIME_CONTROL_DIR" | sed "s#^${RUNTIME_JOB_DIR}#${RUNTIME_NODE_JOB_DIR}#"`
      mv "$RUNTIME_CONTROL_DIR__" "$RUNTIME_CONTROL_DIR"
    fi    
  fi
  # adjust stdin,stdout & stderr pointers
  RUNTIME_JOB_STDIN=`echo "$RUNTIME_JOB_STDIN" | sed "s#^${RUNTIME_JOB_DIR}#${RUNTIME_NODE_JOB_DIR}#"`
  RUNTIME_JOB_STDOUT=`echo "$RUNTIME_JOB_STDOUT" | sed "s#^${RUNTIME_JOB_DIR}#${RUNTIME_NODE_JOB_DIR}#"`
  RUNTIME_JOB_STDERR=`echo "$RUNTIME_JOB_STDERR" | sed "s#^${RUNTIME_JOB_DIR}#${RUNTIME_NODE_JOB_DIR}#"`
  RUNTIME_FRONTEND_JOB_DIR="$RUNTIME_JOB_DIR"
  RUNTIME_JOB_DIR="$RUNTIME_NODE_JOB_DIR"
fi
if [ -z "$RUNTIME_NODE_SEES_FRONTEND" ] ; then
  mkdir -p "$RUNTIME_JOB_DIR"
fi

RESULT=0


# Changing to session directory
cd $RUNTIME_JOB_DIR
export HOME=$RUNTIME_JOB_DIR
if [ "$RESULT" = '0' ] ; then
# Running runtime scripts
export RUNTIME_CONFIG_DIR=${RUNTIME_CONFIG_DIR:-/SOFTWARE/runtime}
runtimeenvironments=

echo "runtimeenvironments=$runtimeenvironments" >> "$RUNTIME_JOB_DIAG"
if [ ! "X$PBS_NODEFILE" = 'X' ] ; then
  if [ -r "$PBS_NODEFILE" ] ; then
    cat "$PBS_NODEFILE" | sed 's/\(.*\)/nodename=\1/' >> "$RUNTIME_JOB_DIAG"
  else
    PBS_NODEFILE=
  fi
fi
if [ "X$PBS_NODEFILE" = X ] ; then
  nodename=`/bin/hostname -f`
  echo "nodename=$nodename" >> "$RUNTIME_JOB_DIAG"
fi
if [ "$RESULT" = '0' ] ; then
if [ ! -x "/usr/bin/time" ] ; then
  echo "warning='GNU time is missing - resource usage not available'">"$RUNTIME_JOB_DIAG" 
   "/bin/sleep" "2850" <$RUNTIME_JOB_STDIN 1>$RUNTIME_JOB_STDOUT 2>$RUNTIME_JOB_STDERR
else
  "/usr/bin/time" -o "$RUNTIME_JOB_DIAG" -a -f 'WallTime=%es\nKernelTime=%Ss\nUserTime=%Us\nCPUUsage=%P\nMaxResidentMemory=%MkB\nAverageResidentMemory=%tkB\nAverageTotalMemory=%KkB\nAverageUnsharedMemory=%DkB\nAverageUnsharedStack=%pkB\nAverageSharedMemory=%XkB\nPageSize=%ZB\nMajorPageFaults=%F\nMinorPageFaults=%R\nSwaps=%W\nForcedSwitches=%c\nWaitSwitches=%w\nInputs=%I\nOutputs=%O\nSocketReceived=%r\nSocketSent=%s\nSignals=%k\n'  "/bin/sleep" "2850" <$RUNTIME_JOB_STDIN 1>$RUNTIME_JOB_STDOUT 2>$RUNTIME_JOB_STDERR
fi
RESULT=$?
fi
fi

if [ ! -z  "$RUNTIME_LOCAL_SCRATCH_DIR" ] ; then
  find ./ -type l -exec rm -f "{}" ";"
  find ./ -type f -exec chmod u+w "{}" ";"
  chmod -R u-w "/3385131714746173538519/gridlog" 2>/dev/null
  chmod -R u-w "/3385131714746173538519/CrimeaEco.err" 2>/dev/null
  chmod -R u-w "/3385131714746173538519/CrimeaEco.txt" 2>/dev/null
  find ./ -type f -perm +200 -exec rm -f "{}" ";"
  find ./ -type f -exec chmod u+w "{}" ";"
fi

if [ ! -z "$RUNTIME_LOCAL_SCRATCH_DIR" ] && [ ! -z "$RUNTIME_NODE_SEES_FRONTEND" ] ; then
  if [ ! -z "$RUNTIME_FRONTEND_SEES_NODE" ] ; then
    # just move it
    rm "$RUNTIME_FRONTEND_JOB_DIR"
    mv "$RUNTIME_NODE_JOB_DIR" `dirname "$RUNTIME_FRONTEND_JOB_DIR"`
  else
    # remove links
    rm "$RUNTIME_JOB_STDOUT" 2>/dev/null
    rm "$RUNTIME_JOB_STDERR" 2>/dev/null
    # move whole directory
    cp -pR "$RUNTIME_NODE_JOB_DIR" `dirname "$RUNTIME_FRONTEND_JOB_DIR"`
    rm -rf "$RUNTIME_NODE_JOB_DIR"
  fi
fi
echo "exitcode=$RESULT" >> "$RUNTIME_JOB_DIAG"
exit $RESULT
-------------------------------------------------------------------

job submitted successfully!
local job id: 8792.thei
----- exiting submit_pbs_job -----

---------- Contents of output stream forwarded by PBS -----------
------------------------- End of output -------------------------
Sep 27 22:05:32 Maximal inactivity time: 300 s
Sep 27 22:05:32 Uploader started
Sep 27 22:05:32 Leaving uploader (0)
