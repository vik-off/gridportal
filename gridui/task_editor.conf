// Инициализация объекта task_editor, который является
// контейнером, содержащим все элементы программы.

task_editor = {};


// Контейнер для хранения конфигурации компонента

task_editor.config = {}; 


task_editor.config.schema = {};

// JSON схема для описания задачи (далее схема)
                               
task_editor.config.schema.main =   

{ "description": "Задача",
  "type": "object",
  "properties":
  { "version": { "type": "integer",
                 "description": "Номер версии используемой схемы описания задачи, для данной схемы это 2."
               },
    "description": { "type": "string",
                     "description": "Человеческое описание задачи",
                     "optional": true
                   },
    "executable": { "type": "string",
                    "description": "Локальный (относительно директории запуска задачи) или абсолютный путь выполняемого файла. Если вы хотите выполнить программу, находящуюся на удаленном ресурсе, необходимо для запуска передать ее в input_files, и она должна иметь атрибут executable на удаленном ресурсе."
                  },
    "arguments": { "type": "array",
                   "description": "аргументы командной строки",
                   "items": { "type": "string" },
                   "optional": true
                 },
    "environment": { "type": "object",
                     "description": "дополнительные переменные среды окружения, которые будут установлены перед запуском задачи; атрибуты данного объекта являются названиями переменных окружения (будут переведены в верхний регистр), значения задают значения переменных",
                     "additionalProperties": true,
                     "optional": true
                   },
    "count": { "type": "integer",
               "description": "Количество процессоров, необходимых для выполнения задачи. Значение этого атрибута более 1 означает, что задача является MPI-задачей. Любые другие значения или отсутствие атрибута означают, что задача не является MPI-задачей.",
               "optional": true
             },
    "input_files": { "type": "object",
                     "description": "Входные файлы задачи. Название атрибутов данного объекта задает названия файлов, значения задают относительные пути или URLы файлов. Путь указывается относительно параметра default_storage_base. Если данный параметр отсутствует в описании задачи, то будет взято значение параметра default_storage_base задания. Если данный параметр отсутствует в описании задания, то все файлы для которых указаны относительные пути будут проигнорированы.",
                     "optional": true },
    "output_files": { "type": "object",
                      "description": "Выходные файлы задачи. Значения аналогично параметру input_files.",
                      "optional": true
                    },
    "stdin": { "type": "string",
               "description": "Отосительный путь или URL для stdin задачи. См. описание параметра input_files.",
               "optional": true
             },
    "stdout": { "type": "string",
                "description": "Отосительный путь или URL для stdout задачи. См. описание параметра input_files.",
                "optional": true
              },
    "stderr": { "type": "string",
                "description": "Отосительный путь или URL для stderr задачи. См. описание параметра input_files.",
                "optional": true
              },

    "max_transfer_attempts": { "type": "integer",
               "description": "Количество повторных попыток передачи каждого файла, завершающихся неудачей, прежде чем передача в целом будет считаться неуспешной.",
               "optional": true
             },



    "default_storage_base": { "type": "string",
                              "format": "uri",
                              "description": "URI, используемый для всех относительных путей файлов как база",
                              "optional": true
                            },
    "requirements": { "type": "schema object",
                      "description": "описание требований задания в целом. Схема прилагается отдельно.",
                      "optional": true
                    },

    "extensions": { "type": "memo",
                      "description": "Дополнительные расширения для запуска задачи. Представлены как набор атрибутов объекта в JSON виде без дополнительной сериализации по типам атрибутов.",
                      "optional": true
                    },

    "meta": { "type": "object",
              "optional": true
            }
  },
  "additionalProperties": false
}



task_editor.config.schema.advanced = {};

// JSON схема для требований к ресурсам

task_editor.config.schema.advanced.requirements =

{ "description": "Требования к ресурсам",
  "type": "object",
  "properties":
  { "hostname": { "type": "array",
                  "description": "Список подходящих хостов",
                  "items": { "type": "string",
                             "description": "имя хоста (FQDN)"
                           },
                  "optional": true,
                  "minItems": 1
                },
    "lrms": { "type": "string",
              "description": "Тип подходящего lrms, case-sensitive.",
              "optional": true
            },
    "fork": { "type": "boolean",
              "description": "Разрешить использовать lrms Fork. По умолчанию используется любой lrms, отличный от Fork (или заданный в lrms). Чтобы использовать lrms Fork, необходимо либо указать \"fork\": true, либо \"lrms\": \"Fork\".",
              "optional": true
            },
    "queue": { "type": "string",
               "description": "Название очереди для scheduler.",
               "optional": true
//             }
             },
    "os_name": { "type": "string", "description": "", "optional": true },
    "os_release": { "type": "string", "description": "","optional": true },
    "os_version": { "type": "string", "description": "","optional": true },
    "platform": { "type": "string", "description": "","optional": true },
    "cpu_instruction_set": { "type": "string", "description": "","optional": true },
    "smp_size": { "type": "integer", "description": "","optional": true },
    "ram_size": { "type": "integer", "description": "","optional": true },
    "virtual_size": { "type": "integer", "description": "","optional": true },
    "cpu_hz": { "type": "integer", "description": "","optional": true },
    "software": { "type": "string", "description": "","optional": true }
  },
  "additionalProperties": false
}



//______________________________________________________________________________

// Контейнер для хранения данных по умолчанию

task_editor.config.default_data = {};   

/*
   Значения по умолчанию для некоторых свойств схемы.
   
   Если для какого-либо параметра не указано значение в текстовом поле,
   либо текстовое поле вовсе отсутствует, то берётся значение по умолчанию, 
   указанное в этом файле.   
*/

task_editor.config.default_data.task =  
{ "version": 2                          
};                                      





//------------------------------------------------------------------------------

// Настройки визуализации свойств "properties" схемы

task_editor.config.properties = {};     

// Неотображаемые свойства

task_editor.config.properties.unvisualized = [ "version",  
                                               "default_storage_base" 
                                             ]
                                             
// Текст, изображаемый в окне браузера вместе с визуализируемыми свойствами.                                          

task_editor.config.properties.visualization = {};

task_editor.config.properties.visualization.headings =  { "executable": "EXECUTABLE = ",
                                                          "arguments": "ARGUMENTS: ",
                                                          "environment": "ENVIRONMENT: ",
                                                          "count": "COUNT = ",
                                                          "input_files": "INPUT_FILES: ",
                                                          "output_files": "OUTPUT_FILES: ",
                                                          "stdin": "STDIN = ",
                                                          "stdout": "STDOUT = ",
                                                          "stderr":  "STDERR = ",
                                                          "max_transfer_attempts":  "MAX_TRANSFER_ATTEMPTS = ",
                                                          "scheduler": "SCHEDULER = ",
                                                          "queue": "QUEUE = ",
                                                          "requirements": "REQUIREMENTS: ",
//
                                                          "extensions": "EXTENSIONS: ",
                                                          "description": "DESCRIPTION = ",
                                                          "meta": "META = "
                                                        }

task_editor.config.properties.visualization.type = {};

task_editor.config.properties.visualization.type.boolean = { options: ["(None)", "True", "False"] };
                                            
task_editor.config.properties.visualization.type.object = { "input_files": [ "Local: ", "Remote: " ],
                                                            "output_files": [ "Local: ", "Remote: " ],
                                                            "environment": [ "", " = " ]
                                                          }
                                                       
task_editor.config.properties.visualization.type.schema_object = { "requirements": { "lrms": "LRMS = ",
                                                                                     "queue": "QUEUE = ",
                                                                                     "fork": "FORK = ",
                                                                                     "hostname": "HOSTNAME: "
,
    "os_name": "OS_NAME =",
    "os_release": "OS_RELEASE =",
    "os_version": "OS_VERSION =",
    "platform": "PLATFORM =",
    "cpu_instruction_set": "CPU_INSTRUCTION_SET =",
    "smp_size": "SMP_SIZE =",
    "ram_size": "RAM_SIZE =",
    "virtual_size": "VIRTUAL_SIZE =",
    "cpu_hz": "CPU_HZ =",
    "software": "SOFTWARE ="                                                  

                                                                                   }
                                                                 }

// Смещение визуализируемых элементов объекта со схемой относительно левого края div-элемента приложения 

task_editor.config.properties.visualization.schema_object_offset = 50;

// Положительный целочисленный параметр, регулирующий высоту div-элемента, визуализирующего определённое свойство схемы

//task_editor.config.properties.visualization.height_parameter = 30;
task_editor.config.properties.visualization.height_parameter = 25;

// Отступ div-элемента первого свойства от верхнего края div-элемента приложения

task_editor.config.properties.visualization.properties_top = 10;



//---user-correction------------------------------------------------------------

// Свойства, в текстовых полях которых разрешено использование кавычек 

task_editor.config.properties.quotes_admited = [ "arguments", 
                                                 "environment", 
                                                 "requirements"
                                               ]

//---end------------------------------------------------------------------------                                                                                                      
                                                

//------------------------------------------------------------------------------

// Текст кнопок, окон сообщений и т. д.

task_editor.config.confirm_window_massage = "Вы уверены, что хотите удалить этот элемент?";

//task_editor.config.text_fields_size = 25;
task_editor.config.text_fields_size = 40;

task_editor.config.memo_fields_cols = 80;
task_editor.config.memo_fields_rows = 10

task_editor.config.buttons = { add: {}, remove: {}, edit: {}, hide: {} };
task_editor.config.buttons.add.value = "Добавить";
task_editor.config.buttons.remove.value = "Удалить";
task_editor.config.buttons.edit.value = "Редактировать";
task_editor.config.buttons.hide.value = "Скрыть";

//---user-correction------------------------------------------------------------

// Фрагменты сообщений об ошибках

task_editor.config.error = {};
task_editor.config.error.messages = {};
task_editor.config.error.messages.bad = "Ошибка: недопустимый символ в числовом поле ";
task_editor.config.error.messages.quotes = " Символы кавычек недопустимы в данном поле";
task_editor.config.error.messages.keys = ": Символы кавычек недопустимы в данном поле!";
task_editor.config.error.messages.JSONsyntax = "Синтаксическая ошибка в описании задачи!";
task_editor.config.error.messages.jobDescriptionSyntax = "Несоответствие формату описания задачи!"; 
task_editor.config.error.messages.incompleteRequiredFieldsSet = "Заполнены не все обязательные текстовые поля. Продолжить?\n\nСписок обязательных к заполнению параметров:"; 

//---end------------------------------------------------------------------------ 